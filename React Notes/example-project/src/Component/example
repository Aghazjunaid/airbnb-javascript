import useCounter from './useCounter'

const customHookCounter = () => {
    const [count, increment, decrement] = useCounter()
    return (
        <>
            <h1>{count}</h1>
            <button  onClick={increment}>Increment</button>
            <button onClick={decrement}>Decrement</button>
            
        </>
    )
}

export default customHookCounter;

import { useState } from "react";


const useCounter = (initialValue = 0) => {
    const [count, setCount] = useState(initialValue);

    function increment(){
        setCount((prev) => prev+1)
    }

    function decrement(){
        setCount((prev) => prev-1)
    }

    return [count, increment, decrement]
}

export default useCounter


import { useState, useEffect } from 'react'

// Custom hook for fetching data
function useFetch(url) {

  const [data, setData] = useState(null) // State for data
  const [loading, setLoading] = useState(true) // State for loading
  const [error, setError] = useState(null) // State for error handling

  useEffect(() => {
    fetchData()
  }, [url]) // Dependency array with url

  const fetchData = async () => {
    setLoading(true)
    setError(null)

    try {
      const response = await fetch(url)

      if (!response.ok) {
        throw new Error(`An error occurred: ${response.statusText}`)
      }

      const jsonData = await response.json()
      setData(jsonData)
    } catch (error) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  return { data, loading, error }
}

export default useFetch;

import React, { useState, useEffect, useRef } from 'react';
import './otp.css';

const OTPPage = () => {
  const [otp, setOtp] = useState(Array(4).fill(''));
  const firstInputRef = useRef(null);

  useEffect(() => {
    if (firstInputRef.current) {
      firstInputRef.current.focus();
    }
  }, []);

  const handleChange = (element, index) => {
    if (element.target.value) {
      if (element.target.nextSibling) {
        element.target.nextSibling.focus();
      }
    }
    setOtp([...otp.map((d, idx) => (idx === index ? element.target.value : d))]);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    alert(`Entered OTP is ${otp.join('')}`);
    setOtp(Array(4).fill(''));
  };

  return (
    <div className="otp-container">
      <h2>Enter OTP</h2>
      <form onSubmit={handleSubmit}>
        {Array(4)
          .fill(1)
          .map((_, index) => (
            <input
              className="otp-field"
              type="tel"
              name={`digit-${index}`}
              key={index}
              value={otp[index]}
              onChange={(e) => handleChange(e, index)}
              maxLength="1"
              ref={index === 0 ? firstInputRef : null}
            />
          ))}
        <button type="submit" className="submit-button">
          Verify OTP
        </button>
      </form>
    </div>
  );
};

export default OTPPage;

*{
    /* background-color: #c9c8c8; */
}
.otp-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100vh;
}
  
  h2 {
    margin-bottom: 20px;
  }
  
  .otp-field {
    width: 50px;
    height: 50px;
    margin: 0 10px;
    text-align: center;
    font-size: 20px;
    border: 1px solid #232222;
    border-radius: 5px;
  }
  
  .submit-button {
    margin-top: 20px;
    padding: 10px 20px;
    font-size: 18px;
    background-color: #4caf50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  .submit-button:hover {
    background-color: #45a049;
  }


  import React, { useState, ChangeEvent } from 'react';
import axios from 'axios';

interface FormValues {
    name: string;
    age: string;
    gender: string;
}

const ButtonComponent: React.FC = () => {
    const [data, setData] = useState<any[]>([]);
    const [form, setForm] = useState<FormValues>({ name: '', age: '', gender: '' });
    const [rev, setRev] = useState<string>('');

    const btnClick = () => {
        axios.get('https://jsonplaceholder.typicode.com/posts')
            .then((res) => setData(res.data))
            .catch((err) => console.log(err));
    }

    const submitBtn = () => {
        console.log(form);
    }

    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
        setRev(e.target.value.split('').reverse().join(''));
    }

    const handle = (e: ChangeEvent<HTMLSelectElement>) => {
        setForm({
            ...form,
            gender: e.target.value
        });
    }

    return (
        <>
            <input type='text' name='name' onChange={(e) => setForm({ ...form, name: e.target.value })} />
            <input type='number' name='age' onChange={(e) => setForm({ ...form, age: e.target.value })} />
            <select onChange={handle} value={form.gender}>
                <option value='male'>male</option>
                <option value='female'>female</option>
            </select>
            <input type='text' onChange={handleChange} />
            <button onClick={submitBtn}>Submit</button >
            <br />
            <button onClick={btnClick}>click me</button>
            {data.length > 0 ? data.map((ele) => {
                return (
                    <div key={ele.id}>
                        <h2>{ele.id}</h2>
                        <p>{ele.title}</p>
                    </div>
                )
            }) : <div>'No data'</div>}
            <p>{rev ? rev : 'no data'}</p>
        </>
    )
}

export default ButtonComponent;

import {useState,useEffect} from 'react';

const Comment = ({comment}) =>{
    return (
        <div>
            <h2>{comment.id}</h2>
            {comment.replies && comment.replies.map((ele,index) => {
                return (
                    <Comment comment={ele} />
                )
            })}
        </div>
    )
}

const InputComponent = () => {
    const comments = [{"id":1,"post_id":2,"parent":null,"replies":[{"id":2,"post_id":2,"parent":1,"replies":[{"id":3,"post_id":2,"parent":2,"replies":[{"id":5,"post_id":2,"parent":3,"replies":null},{"id":6,"post_id":2,"parent":3,"replies":null}]}]}]},{"id":4,"post_id":2,"parent":null,"replies":null}];


    return (
        <>
           {comments.map((ele,index) => {
            return (
                <>
                    <Comment key={ele.id} comment={ele} />
                </>
            )
           })}
        </>
    )
}

export default InputComponent;

// ListItem.js
import React from 'react';

const renderItem = (item, index) => (
    <div key={index} className="scroll-item">
      <img src={item.download_url} alt={`photo-${index}`} loading="lazy" className="img-item"/>
    </div>
);

const ListItem = ({ items }) => {
    return (
       <>
            {items.length > 0 && items.map(renderItem)}
       </>
    );
}

export default ListItem;

.comments-container {
    width: 100%;
    padding: 20px;
    box-sizing: border-box;
  }
  
  .comment {
    border: 1px solid #ddd;
    padding: 10px;
    margin-bottom: 10px;
  }
  
  .comment-id {
    font-size: 16px;
    font-weight: bold;
  }
  
  .post-id {
    font-size: 14px;
  }
  
  .reply {
    margin-left: 20px;
    border-left: 1px solid #ddd;
    padding-left: 10px;
  }

  import React from 'react';
import './NestedComments.css';

const Comment = ({ comment }) => {
  return (
    <div className="comment">
      <h2 className="comment-id">Comment ID: {comment.id}</h2>
      <p className="post-id">Post ID: {comment.post_id}</p>
      {comment.replies && comment.replies.map(reply => (
        <div className="reply">
          <Comment key={reply.id} comment={reply} />
        </div>
      ))}
    </div>
  );
};

const NestedComments = () => {
    const comments = [{"id":1,"post_id":"a","parent":null,"replies":[{"id":2,"post_id":"b","parent":1,"replies":[{"id":3,"post_id":"c","parent":2,"replies":[{"id":5,"post_id":"d","parent":3,"replies":null},{"id":6,"post_id":"e","parent":3,"replies":null}]}]}]},{"id":4,"post_id":"f","parent":null,"replies":null}];

  return (
    <div className="comments-container">
      {comments.map(comment => (
        <Comment key={comment.id} comment={comment} />
      ))}
    </div>
  );
};

export default NestedComments;

// src/Posts.js
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { selectPosts,selectPostsStatus,selectPostsError, fetchPosts } from '../redux/slice/postSlice';

const Posts = () => {
    const dispatch = useDispatch();
    const posts = useSelector(selectPosts);
    const status = useSelector(selectPostsStatus);
    const error = useSelector(selectPostsError);

    const handleFetchPosts = () => {
        dispatch(fetchPosts());
    };

    return (
        <div>
            <button onClick={handleFetchPosts}>Fetch Posts</button>
            {status === 'loading' && <p>Loading...</p>}
            {status === 'failed' && <p>Error: {error}</p>}
            {status === 'succeeded' && (
                <ul>
                    {posts.map(post => (
                        <li key={post.id}>{post.title}</li>
                    ))}
                </ul>
            )}
        </div>
    );
};

export default Posts;

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export const counterSlice = createSlice({
    name: 'counter',
    initialState: {
      value: 0,
    },
    reducers: {
      increment: (state) => {
        // Redux Toolkit allows us to write "mutating" logic in reducers. It
        // doesn't actually mutate the state because it uses the immer library,
        // which detects changes to a "draft state" and produces a brand new
        // immutable state based off those changes
        state.value += 1
      },
      decrement: (state) => {
        state.value -= 1
      },
      incrementByAmount: (state, action) => {
        state.value += action.payload
      },
    },
  })
  
  export const { increment, decrement, incrementByAmount } = counterSlice.actions

  export default counterSlice.reducer


// src/features/postsSlice.js
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts');
    return response.json();
});

const postsSlice = createSlice({
    name: 'posts',
    initialState: {
        posts: [],
        status: 'idle',
        error: null,
    },
    reducers: {},
    extraReducers: (builder) => {
        builder
            .addCase(fetchPosts.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchPosts.fulfilled, (state, action) => {
                state.status = 'succeeded';
                state.posts = action.payload;
            })
            .addCase(fetchPosts.rejected, (state, action) => {
                state.status = 'failed';
                state.error = action.error.message;
            });
    },
});

export const selectPosts = (state) => state.posts.posts;
export const selectPostsStatus = (state) => state.posts.status;
export const selectPostsError = (state) => state.posts.error;

export default postsSlice.reducer;

import { configureStore } from '@reduxjs/toolkit';
import counterReducer from './slice/getCounterSlice';
import postsReducer from './slice/postSlice';

export const store = configureStore({
    reducer: {
        counter: counterReducer,
        posts: postsReducer,
    }
});

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import App from './App.jsx'
import './index.css'
import { Provider } from 'react-redux'
import { store } from './redux/store'


createRoot(document.getElementById('root')).render(
  <StrictMode>
    <Provider store={store}>
        <App />
    </Provider>
  </StrictMode>
)

